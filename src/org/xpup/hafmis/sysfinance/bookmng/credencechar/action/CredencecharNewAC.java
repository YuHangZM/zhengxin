/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.sysfinance.bookmng.credencechar.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.sysfinance.bookmng.credencechar.bsinterface.ICredencecharBS;
import org.xpup.hafmis.sysfinance.bookmng.credencechar.dto.CredencecharDTO;
import org.xpup.hafmis.sysfinance.bookmng.credencechar.form.CredencecharNewAF;

/** 
 * MyEclipse Struts
 * Creation date: 10-23-2007
 * Copy Right Information   : 凭证字
 * Project                  : 文件名
 * @Version                 : 1.0
 * @author                  : 张列
 * 生成日期                   : 10-23-2007
 * XDoclet definition:
 * @struts.action path="/credencecharNewAC" name="credencecharNewAF" scope="request" validate="true"
 */
public class CredencecharNewAC extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method save
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CredencecharNewAF credencecharNewAF = (CredencecharNewAF) form;// TODO Auto-generated method stub
    try {
      //权限
      SecurityInfo securityInfo = (SecurityInfo) request.getSession()
          .getAttribute("SecurityInfo");
      //bookId
      String bookId = securityInfo.getBookId();
      String paramExplain = credencecharNewAF.getParamExplain().trim();
      String paramExplainExplain = credencecharNewAF.getParamExplainExplain().trim();
      CredencecharDTO credencecharDTO = new CredencecharDTO();
      credencecharDTO.setParamExplain(paramExplain);
      credencecharDTO.setParamExplainExplain(paramExplainExplain);
      credencecharDTO.setBookId(bookId);
      
      ICredencecharBS credencecharBS = (ICredencecharBS) BSUtils.getBusinessService(
          "credencecharBS", this, mapping.getModuleConfig());
      //判断输入的凭证字在FN102.PARAM_NUM=2的记录的PARAM_EXPLAIN是否存在
      boolean temp_paramExplain = credencecharBS.is_CredencecharParamExplainInsert(credencecharDTO);
      if(temp_paramExplain){
        //没有记录  插入FN311 ,FN102
        credencecharBS.insertCredencecharInfo(credencecharDTO, securityInfo);
      }else{
        //有记录
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("该凭证字已存在!",
            false));
        saveErrors(request, messages);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
		return mapping.findForward("credencecharShowAC");
	}
  
  
  /** 
   * Method save
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward update(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    CredencecharNewAF credencecharNewAF = (CredencecharNewAF) form;// TODO Auto-generated method stub
    try {
      //权限
      SecurityInfo securityInfo = (SecurityInfo) request.getSession()
          .getAttribute("SecurityInfo");
      //bookId
      String bookId = securityInfo.getBookId();
      String paramExplain = credencecharNewAF.getParamExplain().trim();
      String paramExplainExplain = credencecharNewAF.getParamExplainExplain().trim();
      String paraId = credencecharNewAF.getParaId().trim();
      CredencecharDTO credencecharDTO = new CredencecharDTO();
      credencecharDTO.setParamExplain(paramExplain);
      credencecharDTO.setParamExplainExplain(paramExplainExplain);
      credencecharDTO.setBookId(bookId);
      credencecharDTO.setParaId(paraId);
      ICredencecharBS credencecharBS = (ICredencecharBS) BSUtils.getBusinessService(
          "credencecharBS", this, mapping.getModuleConfig());
      
      //根据ID判断记录是否存在
      boolean temp_isCredencechar = credencecharBS.isCredencecharById(paraId);
      if(!temp_isCredencechar){
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("该记录不存在,不能修改!",
            false));
        saveErrors(request, messages);
        return mapping.findForward("credencecharShowAC");
      }
      
      //判断输入的凭证字在FN102.PARAM_NUM=2的记录的PARAM_EXPLAIN是否存在
      boolean temp_paramExplain = credencecharBS.is_CredencecharParamExplainUpdate(credencecharDTO);
      if(temp_paramExplain){
        //没有记录  插入FN311 ,更新FN102
        credencecharBS.updateCredencecharInfo(credencecharDTO, securityInfo);
      }else{
        //有记录
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("该凭证字已存在!",
            false));
        saveErrors(request, messages);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return mapping.findForward("credencecharShowAC");
  }
}