/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.sysfinance.bookmng.bookstart.action;

import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.xpup.common.exception.BusinessException;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.orgstrct.dto.OfficeDto;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.sysfinance.bookmng.bookstart.bsinterface.IBookstartBS;

/** 
 * MyEclipse Struts
 * Creation date: 10-20-2007
 * Copy Right Information   : 启用账套
 * Project                  : 文件名
 * @Version                 : 1.0
 * @author                  : 张列
 * 生成日期                   : 10-20-2007
 * XDoclet definition:
 * @struts.action path="/bookstartNewAC" name="bookstartAF" scope="request" validate="true"
 */
public class BookstartNewAC extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
    ActionMessages messages=null;
    try {
        //权限
        SecurityInfo securityInfo = (SecurityInfo) request.getSession()
            .getAttribute("SecurityInfo");
        //bookId
        String bookId = securityInfo.getBookId();
        
        IBookstartBS bookstartBS = (IBookstartBS) BSUtils.getBusinessService(
            "bookstartBS", this, mapping.getModuleConfig());

        //判断FN201中是否存在初始余额
        List officeList = securityInfo.getOfficeList();
        OfficeDto officedto = null;
        String stutas="0";
        Iterator itr1 = officeList.iterator();
        while (itr1.hasNext()) {
          officedto = (OfficeDto) itr1.next();
          stutas=bookstartBS.queryCredMessByOfficeID(securityInfo,officedto.getOfficeCode());
          if(!stutas.equals("0")){
            throw new BusinessException("请先进行各办事处下各科目的初始余额操作！");
          }
        }
        
        //账套状态
        String bookST = bookstartBS.getBookST(bookId);
        if(bookST.equals("1")){
          messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("账套已启用！",
              false));
          saveErrors(request, messages);
          saveToken(request);
          return mapping.findForward("bookstartShowAC");
        }
        //判断FN201.DEBIT-FN201.CREDIT是否=0
        boolean temp_debtiCredit = bookstartBS.isDebitCredit(bookId);
        if(temp_debtiCredit){
          //更新FN101.USE_PERSON=操作员 FN101.BOOK_ST=1  ...插入FN311
          bookstartBS.updateBook(securityInfo, bookId);
        }else{
          messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("余额不为“平”,不允许启用账套!",
              false));
          saveErrors(request, messages);
          saveToken(request);
        }
    } catch(BusinessException bex){
      messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(bex
          .getLocalizedMessage().toString(), false));
      saveErrors(request, messages);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
		return mapping.findForward("bookstartShowAC");
	}
}