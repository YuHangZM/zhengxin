/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.sysfinance.bookmng.datainitialize.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.sysfinance.bookmng.datainitialize.bsinterface.IDatainitializeBS;
import org.xpup.hafmis.sysfinance.bookmng.datainitialize.dto.DatainitializeDTO;
import org.xpup.hafmis.sysfinance.bookmng.datainitialize.form.DatainitializeNewAF;

/** 
 * MyEclipse Struts
 * Creation date: 10-16-2007
 * Copy Right Information   : 初始数据
 * Project                  : 文件名
 * @Version                 : 1.0
 * @author                  : 张列
 * 生成日期                   : 10-16-2007
 * XDoclet definition:
 * @struts.action path="/datainitalizeNewAC" name="datainitializeNewAF" scope="request" validate="true"
 */
public class DatainitalizeNewAC extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
    // TODO Auto-generated method stub
		try {
      //权限
      SecurityInfo securityInfo = (SecurityInfo) request.getSession()
      .getAttribute("SecurityInfo");
      //bookId
      String bookId = securityInfo.getBookId();
      String stats = "0";
      DatainitializeNewAF datainitializeNewAF = (DatainitializeNewAF) form;
      String officeName = datainitializeNewAF.getOfficeName();
      List list = new ArrayList();
      if(officeName == null || officeName.equals("")){
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("办事处不能为空！",
            false));
        saveErrors(request, messages);
        int lendsMoneySize = Integer.parseInt(request.getParameter("lendsMoneySize"));
        for(int i=0;i<lendsMoneySize;i++){
          String debit = request.getParameter("debit"+i);
          String credit = request.getParameter("credit"+i);
          String subjectCode = request.getParameter("subjectCode"+i);
          String subjectName = request.getParameter("subjectName"+i);
          String yesterdayDebit = request.getParameter("yesterdayDebit"+i);
          String yesterdayCredit = request.getParameter("yesterdayCredit"+i);
          String yesterdayRemainingSum = request.getParameter("yesterdayRemainingSum"+i);
          String balaceDirection = request.getParameter("radiobb"+i);
          
          DatainitializeDTO datainitializeDTO = new DatainitializeDTO();
          datainitializeDTO.setBookId(bookId);
          datainitializeDTO.setDebit(debit);
          datainitializeDTO.setCredit(credit);
          datainitializeDTO.setSubjectName(subjectName);
          datainitializeDTO.setYesterdayRemainingSum(yesterdayRemainingSum);
          datainitializeDTO.setYesterdayDebit(yesterdayDebit);
          datainitializeDTO.setYesterdayCredit(yesterdayCredit);
          datainitializeDTO.setSubjectCode(subjectCode);
          datainitializeDTO.setOfficeName(officeName);
          datainitializeDTO.setBalaceDirection(balaceDirection);
          
          list.add(datainitializeDTO);
        }
        request.setAttribute("debitError", "0");
        request.setAttribute("datainitializeLists", list);
        return mapping.findForward("datainitalizeShowAC");
      }
      IDatainitializeBS datainitializeBS = (IDatainitializeBS) BSUtils.getBusinessService(
          "datainitializeBS", this, mapping.getModuleConfig());
      String bookST = datainitializeBS.getBookST(bookId);
      BigDecimal debitAll = new BigDecimal("0.00");
      BigDecimal creditAll = new BigDecimal("0.00");
      if(bookST.equals("0")){
        int lendsMoneySize = Integer.parseInt(request.getParameter("lendsMoneySize"));
        for(int i=0;i<lendsMoneySize;i++){
          String debit = request.getParameter("debit"+i);
          String credit = request.getParameter("credit"+i);
          String subjectCode = request.getParameter("subjectCode"+i);
          String subjectName = request.getParameter("subjectName"+i);
          String yesterdayDebit = request.getParameter("yesterdayDebit"+i);
          String yesterdayCredit = request.getParameter("yesterdayCredit"+i);
          String yesterdayRemainingSum = request.getParameter("yesterdayRemainingSum"+i);
          String balaceDirection = request.getParameter("radiobb"+i);
          
          
          try{
            new BigDecimal(yesterdayDebit);
            }catch(Exception ex){
              yesterdayRemainingSum = "0";
              ActionMessages messages = new ActionMessages();
              messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("上年累计借方输入的要是数字!",
                  false));
              saveErrors(request, messages);
              stats = "2";
            }
            
            try{
              new BigDecimal(yesterdayCredit);
              }catch(Exception ex){
                yesterdayRemainingSum = "0";
                ActionMessages messages = new ActionMessages();
                messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("上年累计贷方输入的要是数字!",
                    false));
                saveErrors(request, messages);
                stats = "3";
              }
              
          try{
            new BigDecimal(yesterdayRemainingSum);
            }catch(Exception ex){
              yesterdayRemainingSum = "0";
              ActionMessages messages = new ActionMessages();
              messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("期初余额输入的要是数字!",
                  false));
              saveErrors(request, messages);
              stats = "1";
            }
            
          try{
            if(balaceDirection.equals("0")){
              debitAll = debitAll.add(new BigDecimal(yesterdayRemainingSum));
            }
            }catch(Exception ex){
              debitAll = debitAll.add(new BigDecimal("0.00"));
              ActionMessages messages = new ActionMessages();
              messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("本年累计借方输入的要是数字!",
                  false));
              saveErrors(request, messages);
            }
           try{
             if(balaceDirection.equals("1")){
               creditAll = creditAll.add(new BigDecimal(yesterdayRemainingSum));
             }
             }catch(Exception ex){
               creditAll = creditAll.add(new BigDecimal("0.00"));
               ActionMessages messages = new ActionMessages();
               messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("本年累计贷方输入的要是数字!",
                   false));
               saveErrors(request, messages);
             }
             
          DatainitializeDTO datainitializeDTO = new DatainitializeDTO();
          datainitializeDTO.setBookId(bookId);
          datainitializeDTO.setDebit(debit);
          datainitializeDTO.setCredit(credit);
          datainitializeDTO.setYesterdayRemainingSum(yesterdayRemainingSum);
          datainitializeDTO.setYesterdayDebit(yesterdayDebit);
          datainitializeDTO.setYesterdayCredit(yesterdayCredit);
          datainitializeDTO.setSubjectCode(subjectCode);
          datainitializeDTO.setSubjectName(subjectName);
          datainitializeDTO.setOfficeName(officeName);
          datainitializeDTO.setBalaceDirection(balaceDirection);
          
          list.add(datainitializeDTO);
        }
        if(stats.equals("1")||stats.equals("2")||stats.equals("3")){
          request.setAttribute("debitError", "0");
          request.setAttribute("officeName", officeName);
          request.setAttribute("datainitializeLists", list);
          return mapping.findForward("datainitalizeShowAC");
        }
        if(debitAll.subtract(creditAll).compareTo(new BigDecimal(0.00)) == 0){
          List temp_list = datainitializeBS.is_SummayOffice(bookId, officeName);
          if(temp_list.size()!=0){
            datainitializeBS.deleteSummaryOffice(list, securityInfo);
          }else{
            datainitializeBS.insertSummaryOffice(list, securityInfo);
          }
        }else{
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("累计借方="+debitAll+"累计贷方="+creditAll+"，金额不平!",
              false));
          saveErrors(request, messages);
          request.setAttribute("debitError", "0");
          request.setAttribute("officeName", officeName);
          request.setAttribute("datainitializeLists", list);
        }
      }else{
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("账套已启用!",
            false));
        saveErrors(request, messages);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    request.setAttribute("true", "0");
		return mapping.findForward("datainitalizeShowAC");
	}
  
  public ActionForward totals(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    List list = new ArrayList();
    // TODO Auto-generated method stub
    try {
      int lendsMoneyNumber = Integer.parseInt(request.getParameter("lendsMoneySize"));
      BigDecimal debitAll = new BigDecimal("0.00");
      BigDecimal creditAll = new BigDecimal("0.00");
      for(int i=0;i<lendsMoneyNumber;i++){
        String debit = request.getParameter("debit"+i);
        String credit = request.getParameter("credit"+i);
        
        String subjectName = request.getParameter("subjectName"+i);
        String subjectCode = request.getParameter("subjectCode"+i);
        String balaceDirection = request.getParameter("radiobb"+i);
        String yesterdayRemainingSum = request.getParameter("yesterdayRemainingSum"+i);
        String yesterdayDebit = request.getParameter("yesterdayDebit"+i);
        String yesterdayCredit = request.getParameter("yesterdayCredit"+i);
        
        DatainitializeDTO datainitializeDTO = new DatainitializeDTO();
        datainitializeDTO.setDebit(debit);
        datainitializeDTO.setCredit(credit);
        datainitializeDTO.setSubjectCode(subjectCode);
        datainitializeDTO.setSubjectName(subjectName);
        datainitializeDTO.setYesterdayRemainingSum(yesterdayRemainingSum);
        datainitializeDTO.setBalaceDirection(balaceDirection);
        datainitializeDTO.setYesterdayDebit(yesterdayDebit);
        datainitializeDTO.setYesterdayCredit(yesterdayCredit);
        list.add(datainitializeDTO);
        
        if(debit == null ||debit == ""){
          debit = "0";
        }
        if(credit == null ||credit == ""){
          debit = "0";
        }
        try{
          if(balaceDirection.equals("0")){
            debitAll = debitAll.add(new BigDecimal(yesterdayRemainingSum));
          }
        }catch(Exception ex){
          debitAll = debitAll.add(new BigDecimal("0.00"));
        }
        try{
          if(balaceDirection.equals("1")){
            creditAll = creditAll.add(new BigDecimal(yesterdayRemainingSum));
          }
          }catch(Exception ex){
            creditAll = creditAll.add(new BigDecimal("0.00"));
          }
        }
      
      Iterator it = list.iterator();
      while(it.hasNext()){
        DatainitializeDTO dd = (DatainitializeDTO)it.next();
        String debit = dd.getDebit();
        String credit = dd.getCredit();
        if(debit == null ||debit.equals("")){
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("本年累计借方不能为空!",
              false));
          saveErrors(request, messages);
          request.setAttribute("totals", "1");
          request.setAttribute("status", "1");
          request.setAttribute("totals_datainitializeDTO", list);
          return mapping.findForward("datainitalizeShowAC");
        }
        if(credit == null ||credit.equals("")){
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("本年累计贷方不能为空!",
              false));
          saveErrors(request, messages);
          request.setAttribute("totals", "1");
          request.setAttribute("status", "1");
          request.setAttribute("totals_datainitializeDTO", list);
          return mapping.findForward("datainitalizeShowAC");
        }
        try {
          new BigDecimal(debit);
        } catch (Exception e) {
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("本年累计借方输入的要是数字!",
              false));
          saveErrors(request, messages);
          request.setAttribute("totals", "1");
          request.setAttribute("status", "1");
          request.setAttribute("totals_datainitializeDTO", list);
          return mapping.findForward("datainitalizeShowAC");
        }
        try {
          new BigDecimal(credit);
        } catch (Exception e) {
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("本年累计贷方输入的要是数字!",
              false));
          saveErrors(request, messages);
          request.setAttribute("totals", "1");
          request.setAttribute("status", "1");
          request.setAttribute("totals_datainitializeDTO", list);
          return mapping.findForward("datainitalizeShowAC");
        }
      }
      
      if(debitAll.subtract(creditAll).compareTo(new BigDecimal(0.00)) == 0){
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("累计借方="+debitAll+"累计贷方="+creditAll+"，金额已平!",
            false));
        saveErrors(request, messages);
      }else{
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("累计借方="+debitAll+"累计贷方="+creditAll+"，金额不平!",
            false));
        saveErrors(request, messages);
      }
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    request.setAttribute("totals", "1");
    request.setAttribute("status", "1");
    request.setAttribute("totals_datainitializeDTO", list);
    
    return mapping.findForward("datainitalizeShowAC");
  }
}