/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.sysfinance.treasurermng.balanceinitialize.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.sysfinance.treasurermng.balanceinitialize.bsinterface.IBalanceinitializeBS;
import org.xpup.hafmis.sysfinance.treasurermng.balanceinitialize.dto.BalanceinitializeDTO;
import org.xpup.hafmis.sysfinance.treasurermng.balanceinitialize.form.BalanceinitializeAF;

/** 
 * MyEclipse Struts
 * Creation date: 10-19-2007
 * Copy Right Information   : 余额初始
 * Project                  : 文件名
 * @Version                 : 1.0
 * @author                  : 张列
 * 生成日期                   : 10-19-2007
 * XDoclet definition:
 * @struts.action path="/balanceinitializeNewAC" name="balanceinitializeAF" scope="request" validate="true"
 */
public class BalanceinitializeNewAC extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BalanceinitializeAF balanceinitializeAF = (BalanceinitializeAF) form;// TODO Auto-generated method stub
    try {
      SecurityInfo securityInfo = (SecurityInfo) request.getSession()
      .getAttribute("SecurityInfo");
      //bookId
      String bookId = securityInfo.getBookId();
      //officeName
      String officeName = balanceinitializeAF.getOfficeName();
      if(officeName == null || officeName.equals("")){
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("办事处不能为空！",
            false));
        saveErrors(request, messages);
        return mapping.findForward("balanceinitializeShowAC");
      }
      IBalanceinitializeBS balanceinitializeBS = (IBalanceinitializeBS) BSUtils.getBusinessService(
          "balanceinitializeBS", this, mapping.getModuleConfig());
      
      int lendsMoneyNumber = Integer.parseInt(request.getParameter("lendsMoneySize"));
      List list = new ArrayList();
      for(int i=0;i<lendsMoneyNumber;i++){
        String debit = request.getParameter("debit"+i);
        String subjectName = request.getParameter("subjectName"+i);
        String subjectCode = request.getParameter("subjectCode"+i);
        BalanceinitializeDTO temp_balanceinitializeDTO = new BalanceinitializeDTO();
        temp_balanceinitializeDTO.setBookId(bookId.trim());
        temp_balanceinitializeDTO.setDebit(debit.trim());
        temp_balanceinitializeDTO.setOfficeName(officeName);
        temp_balanceinitializeDTO.setSubjectCode(subjectCode);
        temp_balanceinitializeDTO.setSubjectName(subjectName);
        list.add(temp_balanceinitializeDTO);
      }
      
      //余额初始 同一办事处下的SUBJECT_CODE中存在相同的值 返回INT 大于1有相同的值
      int temp_bt = balanceinitializeBS.getBalanceinitializeBT(bookId, officeName);
      if(temp_bt >1){
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("余额初始已设定!",
              false));
          saveErrors(request, messages);
          request.setAttribute("result", "1");
          request.setAttribute("officeName", officeName);
          request.setAttribute("balanceinitializeList", list);
        return mapping.findForward("balanceinitializeShowAC");
      }
      
      Iterator it = list.iterator();
      while(it.hasNext()){
        BalanceinitializeDTO temp_balanceinitializeDTO = (BalanceinitializeDTO)it.next();
        try {
          Double.parseDouble(temp_balanceinitializeDTO.getDebit().trim());
        } catch (Exception e) {
          ActionMessages messages = new ActionMessages();
          messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("余额初始必须输入数值!",
              false));
          saveErrors(request, messages);
          request.setAttribute("debitError", "0");
          request.setAttribute("officeName", officeName);
          request.setAttribute("balanceinitializeList", list);
          return mapping.findForward("balanceinitializeShowAC");
        }
      }
      int temp_number = balanceinitializeBS.is_Balanceinitialize_ZL(bookId, officeName);
      if(temp_number > 0){
        balanceinitializeBS.deleteBalanceinitialize(securityInfo, list);
      }else{
        balanceinitializeBS.insertBalanceinitialize(securityInfo, list);
      }
      
    } catch (Exception e) {
      e.printStackTrace();
    }
    return mapping.findForward("balanceinitializeShowAC");
	}
}