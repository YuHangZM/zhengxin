/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.syscollection.chgbiz.chgslarybase.action;

import java.io.File;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.upload.FormFile;
import org.xpup.common.exception.BusinessException;
import org.xpup.common.util.BSUtils;
import org.xpup.common.util.imp.Factory;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.syscollection.chgbiz.chgslarybase.bsinterface.IChgslarybaseBS;
import org.xpup.hafmis.syscollection.chgbiz.chgslarybase.form.ChgslarybaseImportTaAF;

/**
 * MyEclipse Struts Creation date: 04-11-2007 XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class ChgslarybaseTaImportAC extends Action {
  /*
   * Generated Methods
   */

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    // TODO Auto-generated method stub
    ActionMessages messages =null;
    ChgslarybaseImportTaAF forms = (ChgslarybaseImportTaAF) form;
    String orgId = request.getParameter("orgId");
    String chgMonth = request.getParameter("chgMonth");
 
    SecurityInfo securityInfo=(SecurityInfo)request.getSession().getAttribute("SecurityInfo");
    String ip=securityInfo.getUserInfo().getUserIp();
    String name=securityInfo.getUserInfo().getUsername();
    String date=securityInfo.getUserInfo().getBizDate();
    FormFile file = forms.getTheFile();
 
    String fileType = file.getFileName().substring(
        file.getFileName().lastIndexOf(".") + 1);
    if (file.toString().length() < 1) {
      return (mapping.findForward("文件无后缀"));
    } else if (!fileType.equals("xls")) {
      return (mapping.findForward("文件后缀不是xls格式"));
    }
    ServletContext context = request.getSession().getServletContext();
    String jasperSrc = context.getRealPath("/impXml/" + "chgslarybase_imp.xml");
    File files = new File(forms.getUrl());
    Factory faxtory = new Factory();
    File xmlfile = new File(jasperSrc);
    Map info = null;
    try {
      InputStream stream = file.getInputStream();
      info = faxtory.getInfomation(xmlfile, stream,"org.xpup.hafmis.syscollection.chgbiz.chgslarybase.dto.");
    } catch (Exception e) {
      messages=new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("导入格式不对！",
          false));
      saveErrors(request, messages);
      return mapping.findForward("chgslarybaseTaShowAC.do");
    }
    List addchgslarybaseHeadImportList = (List) info
        .get("ChgslarybaseHeadImport");
    List addchgslarybaseListImportList = (List) info
        .get("ChgslarybaseListImport");
    IChgslarybaseBS chgslarybaseBS = (IChgslarybaseBS) BSUtils
        .getBusinessService("chgslarybaseBS", this, mapping.getModuleConfig());

    List failList = null;
    try {
      failList = chgslarybaseBS.addChgslarybaseListBatch(addchgslarybaseHeadImportList,
          addchgslarybaseListImportList,orgId,chgMonth,ip,name,date,securityInfo);
      if(failList!=null){
      if (failList.size() > 0) {    
        request.getSession().setAttribute("explist", failList);
        response.sendRedirect(request.getContextPath()
            + "/ExportServlet?ISCANSHU=false&EXP_NAME=chgslarybase_exp");
        return null;
      }
      
      }
    } catch (BusinessException b) {
      messages=new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("导入失败！"+b.getMessage(),
          false));
      saveErrors(request, messages);
    } catch (Exception e) {
      e.printStackTrace();
    }
    return mapping.findForward("chgslarybaseTaShowAC.do");
  }

}