/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.syscollection.pickupmng.pickup.action;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.LookupDispatchAction;
import org.xpup.common.exception.BusinessException;
import org.xpup.common.util.BSUtils;
import org.xpup.common.util.Pagination;
import org.xpup.hafmis.common.form.IdAF;
import org.xpup.hafmis.common.util.BusiConst;
import org.xpup.hafmis.common.util.BusiTools;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.syscollection.common.domain.entity.Org;
import org.xpup.hafmis.syscollection.common.domain.entity.PickHead;
import org.xpup.hafmis.syscollection.common.domain.entity.PickTail;
import org.xpup.hafmis.syscollection.pickupmng.pickup.bsinterface.IPickupBS;
import org.xpup.hafmis.syscollection.pickupmng.pickup.dto.ApplyBookDTO;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.NameAF;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickGetEmployeeInfoAF;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickupGetCompanyIdAF;
import org.xpup.hafmis.syscollection.systemmaintain.loanpara.bsinterface.ILoanDocNumDesignBS;
import org.xpup.hafmis.sysloan.loanapply.loanapply.bsinterface.ILoanapplyBS;
import org.xpup.hafmis.sysloan.loanapply.loanapply.form.LoanapplyTdNewAF;

public class VindicatePickMiantainAC extends LookupDispatchAction {
  protected Map getKeyMethodMap() {
    Map map = new HashMap();
    map.put("button.delete", "delete");
    map.put("button.print.pick.fkpz", "print");
    map.put("button.printList", "printlist");
    map.put("button.update", "update");
    map.put("button.over.pickup", "overPickup");
    map.put("button.del.pickup", "deletePickup");
    map.put("button.referring.data", "referringdata");
    map.put("button.pproval.data", "pprovaldata");
    return map;
  }

  public ActionForward delete(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    ActionMessages messages = null;
    try {
      IdAF idAF = (IdAF) form;
      IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
          mapping.getModuleConfig());
      int id = Integer.parseInt(idAF.getId().toString());
      SecurityInfo sInfo = (SecurityInfo) request.getSession().getAttribute(
          "SecurityInfo");
      pbs.deleteHeadTailByHeadId(id, sInfo.getUserIp(), sInfo.getUserName(),
          sInfo);
      request.getSession().removeAttribute(VindicateListShowAC.VINDICATE);
    } catch (BusinessException e) {
      messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(e
          .getLocalizedMessage().toString(), false));
      saveErrors(request, messages);
    } catch (Exception s) {
      s.printStackTrace();
    }
    return new ActionForward("/vindicateListShowAC.do");
  }

  public ActionForward update(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    try {
      IdAF idAF = (IdAF) form;
      IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
          mapping.getModuleConfig());
      int id = Integer.parseInt(idAF.getId().toString());
      SecurityInfo sInfo = (SecurityInfo) request.getSession().getAttribute(
          "SecurityInfo");
      String orgId = pbs.findOrdIdByHeadId(Integer.parseInt(idAF.getId()
          .toString()));
      pbs.update(id, Integer.parseInt(orgId), sInfo.getUserIp(), sInfo
          .getUserName());
      Pagination pag = new Pagination(0, 10, 1, "pt.id", "DESC", new HashMap(0));
      pag.getQueryCriterions().put("idValue", orgId);
      pag.getQueryCriterions().put("vindicateUpdate", "update");
      // 根据更新的要求 所以这么写
      request.getSession().setAttribute(PickupShowAC.PAGINACTION_KEY, pag);
    } catch (Exception s) {
      s.printStackTrace();
    }
    return new ActionForward("/pickupShowAC.do");
  }

  public ActionForward overPickup(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    // 完成提取的打印...打印凭证和列表
    ActionMessages messages = new ActionMessages();
    try {
      String print = request.getParameter("report");
      IdAF idAF = (IdAF) form;
      IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
          mapping.getModuleConfig());
      SecurityInfo s = (SecurityInfo) request.getSession().getAttribute(
          "SecurityInfo");
      Org org = pbs.getOrgByHeadId(new Integer(idAF.getId().toString()));// 完成提取做了...
      int orgId = Integer.parseInt(org.getId().toString());
      boolean flag = pbs.overPickVindicate(orgId, s.getUserIp(), s
          .getUserName(), s.getUserInfo().getBizDate(), null, s);// 启动完成提取操作数据库的语句
      if (flag) {

        return new ActionForward("/vindicateActionAC.do");
      } else {
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
            "不能完成提取，该笔业务已经完成提取过", false));
        saveErrors(request, messages);
        return new ActionForward("/vindicateActionAC.do");
      }
    } catch (Exception s) {
      s.printStackTrace();
    }
    return null;
  }

  public ActionForward deletePickup(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    try {
      IdAF idAF = (IdAF) form;
      IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
          mapping.getModuleConfig());
      SecurityInfo s = (SecurityInfo) request.getSession().getAttribute(
          "SecurityInfo");
      // System.out.println("deletepickup-->"+idAF.getId());//这个地方应该换成头表的ID这样
      int headId = Integer.parseInt(idAF.getId().toString());
      String statueIsOne = pbs.recallPickup(headId, s);
      // 证明已经是返回来了 根本没有做撤消提取的业务..表里也不会直接插字段...
      if (statueIsOne != null) {
        ActionMessages errors = new ActionMessages();
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
            "撤消提取失败 存在未完成的提取业务,请先完成", false));
        saveErrors(request, errors);
      }
    } catch (Exception ss) {
      // System.out.println("撤消提取出现错误");
      ss.printStackTrace();
    }
    return new ActionForward("/vindicateActionAC.do");
  }

  public ActionForward referringdata(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    IdAF idAF = (IdAF) form;
    String headId = idAF.getId().toString();
    IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
        mapping.getModuleConfig());
    SecurityInfo securityInfo = (SecurityInfo) request.getSession()
        .getAttribute("SecurityInfo");
    ActionMessages messages = null;
    String temp_p = "2";
    try {
      pbs.referringData(headId, securityInfo, temp_p);
    } catch (BusinessException be) {
      messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(be
          .getLocalizedMessage().toString(), false));
      saveErrors(request, messages);
    }
    return new ActionForward("/vindicateActionAC.do");
  }

  public ActionForward pprovaldata(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    IdAF idAF = (IdAF) form;
    String headId = idAF.getId().toString();
    IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
        mapping.getModuleConfig());
    SecurityInfo securityInfo = (SecurityInfo) request.getSession()
        .getAttribute("SecurityInfo");
    ActionMessages messages = null;
    String temp_p = "2";
    try {
      pbs.pprovalData(headId, securityInfo, temp_p);
    } catch (BusinessException be) {
      messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(be
          .getLocalizedMessage().toString(), false));
      saveErrors(request, messages);
    }
    return new ActionForward("/vindicateActionAC.do");
  }

  public ActionForward print(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    List print = null;
    try {
      // String print =
      // request.getParameter("report");//和完成提取的方法完全一样..只是少了一句完成提取功能的BS函数
      // System.out.println("print-->"+print);
      IdAF idAF = (IdAF) form;
      IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
          mapping.getModuleConfig());
      ILoanDocNumDesignBS loanDocNumDesignBS = (ILoanDocNumDesignBS) BSUtils
          .getBusinessService("loanDocNumDesignBS", this, mapping
              .getModuleConfig());
      SecurityInfo s = (SecurityInfo) request.getSession().getAttribute(
          "SecurityInfo");
      int orgId = Integer.parseInt(idAF.getId().toString());
      Date bizdate = BusiTools.stringToUDate(s.getUserInfo().getBizDate(),
          "yyyyMMdd");
      String date = BusiTools.dateToString(bizdate, "yyyy-MM-dd");

      String userName = "";
      String checkperson = "";
      try {
        String name = loanDocNumDesignBS.getNamePara();

        if (name.equals("1")) {
          userName = s.getUserName();
        } else {
          userName = s.getRealName();
        }

      } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      // System.out.println("overpikcup-->"+idAF.getId());
      // System.out.println("...打印...");
      List list = pbs.getPrintAllEmployeeList(idAF.getId().toString());// 获得要打印的集合..
      // System.out.println("打印的集合长度是......."+list.size());
      ApplyBookDTO apply = new ApplyBookDTO();// 获取凭证..
      PickTail pick = null;
      if (list.size() > 0) {
        pick = (PickTail) list.get(0);
      }
      NameAF nameAF = new NameAF();
      nameAF = pbs.findName(pick.getPickHead().getOrg().getId().toString());

      String office = "";
      String collbankname = "";
      String str[] = new String[2];

      str = pbs.queryOfficeBankNames(pick.getPickHead().getOrg().getId()
          .toString(), "2", idAF.getId().toString(), "D", s);

      if (str[0] != null) {
        office = str[0];
      }
      if (str[1] != null) {
        collbankname = str[1];
      }
      print = pbs.getPrintAllEmployeeList(idAF.getId().toString());// 获得打印的集合
      apply.setOrgid("0" + pick.getPickHead().getOrg().getId().toString());
      apply.setOther_card_num(pick.getPickHead().getReserveaA());
      apply.setSOrgName(nameAF.getOrgName());// 收款单位名称
      apply.setSOrgNumber(nameAF.getPayBankNum());// 收款单位账号(发薪银行)
      apply.setSOrgBank(nameAF.getPayBank());// 收款单位银行
      apply.setFOrgName(office);// 付款单位名称(中心)
      apply.setFOrgNumber(nameAF.getPayBankNum());// 付款单位账号(中心)
      apply.setFOrgBank(collbankname);// 付款单位(中心归集银行)
      apply.setPickBalance(pick.getPickHead().getPickBalance().add(
          pick.getPickHead().getDistroyInterest()).divide(new BigDecimal(1), 2,
          BigDecimal.ROUND_HALF_DOWN));// 必须转换成两位小数
      date = pick.getPickHead().getSettDate();
      date = date.substring(0, 4) + "年" + date.substring(4, 6) + "月"
          + date.substring(6, 8) + "日";
      apply.setBizdate(date);
      apply.setDocnum(pick.getPickHead().getDocNum());// getDocNum()
      apply.setNote_num(pick.getPickHead().getNoteNum());
      userName = pbs.getpickup_oper(pick.getPickHead().getId().toString());
      userName = pbs.find_user_realname(userName);
      apply.setOperater(userName);
      checkperson = pbs.getpickup_check(pick.getPickHead().getId().toString());
      checkperson = pbs.find_user_realname(checkperson);
      apply.setCheckperson(checkperson);
      request.setAttribute("apply", apply);
      request.setAttribute("PRINT", "vindicateListShowAC.do");
      request.setAttribute("employee", list);
      // 获得打印凭证
    } catch (Exception s) {
      s.printStackTrace();
    }
    if (print.size() == 1) {
      return new ActionForward("/printDoc.jsp");
    } else {
      return new ActionForward("/emplist_mx_cell.jsp");
    }
  }

  public ActionForward printlist(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response)
      throws Exception {
    SecurityInfo securityInfo = (SecurityInfo) request.getSession()
        .getAttribute("SecurityInfo");
    request.getSession().setAttribute("securityInfo", securityInfo);
    List count = (List) request.getSession().getAttribute("print_list");
    ILoanDocNumDesignBS loanDocNumDesignBS = (ILoanDocNumDesignBS) BSUtils
        .getBusinessService("loanDocNumDesignBS", this, mapping
            .getModuleConfig());
    IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
        mapping.getModuleConfig());
    String date = "";
    ApplyBookDTO apply = new ApplyBookDTO();// 获取凭证..
    PickHead pick = null;
    String collbankname = "";
    String userName = "";
    Date bizdate = BusiTools.stringToUDate(securityInfo.getUserInfo()
        .getBizDate(), "yyyyMMdd");
    date = BusiTools.dateToString(bizdate, "yyyy-MM-dd");
    if (count.size() > 0) {
      pick = (PickHead) count.get(0);
    }
    String str[] = new String[2];
    str = pbs.queryOfficeBankNames(pick.getOrg().getId().toString(), "2", pick
        .getId().toString(), "D", securityInfo);

    if (str[1] != null) {
      collbankname = str[1];
    }
    String name = loanDocNumDesignBS.getNamePara();

    if (name.equals("1")) {
      userName = securityInfo.getUserName();
    } else {
      userName = securityInfo.getRealName();
    }

    apply.setFOrgBank(collbankname);// 付款单位(中心归集银行)
    // apply.setPickBalance(pick.getPickBalance().add(pick.getDistroyInterest()).divide
    // (new BigDecimal(1),2,BigDecimal.ROUND_HALF_DOWN));//必须转换成两位小数
    apply.setBizdate(date);
    apply.setOperater(userName);

    request.setAttribute("apply", apply);
    request.setAttribute("date", date);
    request.getSession().setAttribute("picklist", count);
    request.setAttribute("PRINT", "vindicateListShowAC.do");
    return new ActionForward("/print_list_tq.jsp");
  }

}