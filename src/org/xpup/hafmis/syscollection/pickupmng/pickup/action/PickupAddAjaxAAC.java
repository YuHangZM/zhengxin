/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.syscollection.pickupmng.pickup.action;

import java.math.BigDecimal;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.common.util.CardMunChange;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.syscollection.common.domain.entity.SpecialPick;
import org.xpup.hafmis.syscollection.pickupmng.pickup.bsinterface.IPickupBS;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickGetEmployeeInfoAF;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickupAddAF;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickupGetCompanyIdAF;
import org.xpup.hafmis.syscollection.pickupmng.pickup.pickrule.DrawRulesInterface;

/**
 * MyEclipse Struts Creation date: 07-09-2007 XDoclet definition:
 * 
 * @struts.action parameter="method" validate="true"
 */
public class PickupAddAjaxAAC extends DispatchAction {
  public ActionForward pickReason(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    try {
      ActionMessages errors = new ActionMessages();
      String reason = request.getParameter("reason");
      String empId = request.getParameter("empId");
      SpecialPick special = (SpecialPick) request.getSession().getAttribute(
          "special");// 看一看此用户是不是特殊提取

      // System.out.println("Reason:"+reason);
      String orgId1 = (String) request.getSession().getAttribute(
          "pickupdisplayaddinfoac");
      IPickupBS pbs = (IPickupBS) BSUtils.getBusinessService("pickupBS", this,
          mapping.getModuleConfig());
      
      String pickreason = pbs.getAA306_1();
      String pr[]=new String[0];
      String yesa = "no";
      if(pickreason!=null && !pickreason.equals("")){
        pr = pickreason.split(",");
        for(int i=0;i<pr.length;i++){
          if(pr[i].equals(reason)){
            yesa="yes";
          }
        }
        if(yesa.equals("yes")){//说明此原因的提取需要审批！
          List list = pbs.getpickup_not_aa306(new Integer(orgId1).intValue());//查询确认状态前的尾表原因列表
          if(list!=null && list.size()!=0){
            for(int i=0;i<list.size();i++){
              String alert = "no";
              for(int j=0;j<pr.length;j++){
                if(list.get(i).toString().equals(pr[j])){
                  alert="true";
                  break;
                }
              }
              if(alert.equals("no")){
                errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    "此原因的提取需要审批，不能与不需要审批的做在一起", false));
                saveErrors(request, errors);
                request.getSession().setAttribute("display",
                    new PickGetEmployeeInfoAF());
                break;
              }
            }
          }
        }else{//说明此原因的提取不需要审批！
          List list = pbs.getpickup_not_aa306(new Integer(orgId1).intValue());//查询确认状态前的尾表原因列表
          if(list!=null && list.size()!=0){
            for(int i=0;i<list.size();i++){
              String alert = "no";
              for(int j=0;j<pr.length;j++){
                if(list.get(i).toString().equals(pr[j])){
                  alert="true";
                  break;
                }
              }
              if(alert.equals("true")){
                errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    "此原因的提取不需要审批，不能与需要审批的做在一起", false));
                saveErrors(request, errors);
                request.getSession().setAttribute("display",
                    new PickGetEmployeeInfoAF());
                break;
              }
            }
          }
        }
      }
      
      String card_num = pbs.find_empid_card_num(orgId1.toString(), empId);
      String card_num_two = "";
      if (card_num.length() == 18) {
        card_num_two = CardMunChange.get15Id(card_num);
      }
      if (card_num.length() == 15) {
        card_num_two = CardMunChange.get18Id(card_num);
      }
      // List flaglist = pbs.checkpicker(card_num, card_num_two);//
      // 检查提取人是否存在贷款业务
      String count = pbs.checkpicker_yg(card_num, card_num_two);// 检查提取人是否存在贷款业务

      if (reason.equals("2")) {
        errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
            "公积金按月还贷不在此处办理!", false));
        saveErrors(request, errors);
        request.getSession().setAttribute("display",
            new PickGetEmployeeInfoAF());
      }
      if (reason.equals("3")) {
        int pick_pl = pbs.getpickup_not_pl(new Integer(orgId1).intValue());

        if (pick_pl > 0) {
          errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
              "公积金一次性还贷款不能与其它提取原因一起办理,请先审核完成再办理提取!", false));
          saveErrors(request, errors);
          request.getSession().setAttribute("display",
              new PickGetEmployeeInfoAF());
        }
      } else {
        int pick_pl = pbs.getpickup_pl(new Integer(orgId1).intValue());

        if (pick_pl > 0) {
          errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
              "此单位下存在提取原因为公积金一次性还贷款的提取业务,请先审核完成再办理提取!", false));
          saveErrors(request, errors);
          request.getSession().setAttribute("display",
              new PickGetEmployeeInfoAF());
        }
      }
      if (special == null) {
        if (count.equals("1") && !reason.equals("3")) {
          errors = new ActionMessages();
          errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
              "此员工存在贷款业务，不可以提取", false));
          saveErrors(request, errors);
          request.getSession().setAttribute("display",
              new PickGetEmployeeInfoAF());
        }
      }

      PickGetEmployeeInfoAF aff = (PickGetEmployeeInfoAF) request.getSession()
          .getAttribute("display");
      aff.setReason(reason);
      String yearPickNumber = request.getParameter("yearPickNumber");
      Integer orgId = (Integer) request.getSession().getAttribute("orgId");
      PickupAddAF af = new PickupAddAF();

      DrawRulesInterface somePick = (DrawRulesInterface) BSUtils
          .getBusinessService("somePick", this, mapping.getModuleConfig());
      DrawRulesInterface distory = (DrawRulesInterface) BSUtils
          .getBusinessService("allPick", this, mapping.getModuleConfig());
      if (reason.equals("1") || reason.equals("2") || reason.equals("3")
          || reason.equals("4") || reason.equals("5") || reason.equals("6")) {// 如果是部分提取

        // 这个地方本身就是一个工厂...
        if (special == null) {
          // System.out.println("...不是特殊提取的查询最大金额...");
          BigDecimal maxMoney = somePick.getMaxDarwMoney(orgId.intValue(),
              Integer.parseInt(empId), reason);
          if (maxMoney == null)
            af.setMaxPickBalance("0.00");
          else {
            af.setMaxPickBalance(maxMoney.setScale(2).toString());
          }
        } else {
          // System.out.println("...此用户是特殊提取
          // 提取最大金额为本金...:"+special.getOrg().getId()+","+special.getEmpId()+","+special.getIsPick());
          af.setMaxPickBalance(special.getPickCorpus().setScale(2).toString());
        }
        af.setDistoryInterest("0.00");
      } else {// 销户提取
        BigDecimal max = distory.getMaxDarwMoney(orgId.intValue(), Integer
            .parseInt(empId), reason);
        if (max == null)
          af.setMaxPickBalance("0.00");
        else {
          af.setMaxPickBalance(max.setScale(2).toString());
        }
        af.setPickBalance(max.setScale(2).toString());
        SecurityInfo sInfo = (SecurityInfo) request.getSession().getAttribute(
            "SecurityInfo");
        BigDecimal interest = pbs.getDistroyPickupInterest1(orgId, new Integer(
            empId), sInfo.getUserInfo().getBizDate());
        String inter = interest.toString();
        BigDecimal bInterest = interest;
        af.setDistoryInterest(bInterest.divide(new BigDecimal(1), 2,
            BigDecimal.ROUND_HALF_DOWN).toString());
        BigDecimal sum = interest.add(max.setScale(2));
        af.setSum(sum.divide(new BigDecimal(1), 2, BigDecimal.ROUND_HALF_DOWN)
            .toString());
        request.setAttribute("read", "onlyRead");
      }

      request.setAttribute("result", af);
      return new ActionForward("/pickup_add.jsp");
    } catch (Exception s) {
      s.printStackTrace();
    }
    return new ActionForward("/pickup_add.jsp");
  }

  public String getTwoDouble(String num) {
    if (num.indexOf(".") != -1) {
      String str;
      str = num.substring(num.indexOf(".") + 1, num.length());// 获取小数点后面的位数
      if (str.length() >= 2) {
        str = str.substring(0, 2);
      }
      if (str.length() == 1) {
        str = str.substring(0, 1) + "0";
      }
      // System.out.println(str);
      num = num.substring(0, num.indexOf(".")) + "." + str;
    }
    return num;
  }
}