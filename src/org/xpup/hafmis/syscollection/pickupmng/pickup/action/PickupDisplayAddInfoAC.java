/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.syscollection.pickupmng.pickup.action;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.common.util.BusiConst;
import org.xpup.hafmis.common.util.BusiTools;
import org.xpup.hafmis.common.util.CardMunChange;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.syscollection.common.domain.entity.Emp;
import org.xpup.hafmis.syscollection.common.domain.entity.SpecialPick;
import org.xpup.hafmis.syscollection.pickupmng.pickup.bsinterface.IPickupBS;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickGetEmployeeInfoAF;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickupAddAF;

/** 
 * MyEclipse Struts
 * Creation date: 07-07-2007
 * 
 * XDoclet definition:
 * @struts.action path="/pickupDisplayAddInfoAC" name="pickGetEmployeeInfoAFForm" scope="request" validate="true"
 */
public class PickupDisplayAddInfoAC extends Action {
	/*
	 * Generated Methods
	 */
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
    SecurityInfo securityInfo = (SecurityInfo) request.getSession().getAttribute("SecurityInfo");//为了加单位权限而得到的对象
    try{
      ActionMessages errors = new ActionMessages();
      String empId = request.getParameter("empId");
//      String orgId = request.getParameter("orgId");
      Integer orgId1 = (Integer)request.getSession().getAttribute("orgId");
      request.getSession().setAttribute("pickupdisplayaddinfoac", orgId1.toString());
      PickGetEmployeeInfoAF af = new PickGetEmployeeInfoAF();
      request.getSession().removeAttribute("display");
      if(empId==null || empId.equals("")){//当操作员点添加的时候
        af.setHouseNum("");
        request.getSession().setAttribute("display", af);
      }else{
        IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
        Emp emp = pbs.findEmpByOrdIdAndEmpId(orgId1, new Integer(empId));//emp表里是否有此员工
        if(emp == null){//当不存在的时候..
           errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("此单位不存在这个员工",false));
           saveErrors(request, errors);
           af.setHouseNum("");
           request.getSession().setAttribute("display", af);
        }else{//当此员工存在的时候...

          request.getSession().removeAttribute("special");
          List list = pbs.findPickTailByEmpId(new Integer(empId));//判断此员工在尾表里是否存在
          af.setEmpId(emp.getEmpId().toString());
          af.setCurBalance(emp.getCurBalance().setScale(2).toString());
          af.setPreBalance(emp.getPreBalance().setScale(2).toString());
          af.setName(emp.getEmpInfo().getName());
          af.setCardKind(BusiTools.getBusiValue(emp.getEmpInfo().getCardKind().intValue(), BusiConst.DOCUMENTSSTATE));
          af.setCardNum(emp.getEmpInfo().getCardNum());
          af.setBalance(emp.getBalance().setScale(2).toString());
          if(emp.getPayOldYear()!=null&&!emp.getPayOldYear().toString().equals("0")){
            af.setOld_yearpay(emp.getPayOldYear().toString());
          }else{
            af.setOld_yearpay( emp.getOrgPay().add(emp.getEmpPay()).toString());
          }

          af.setButtonState("全部显示");
          SpecialPick s = pbs.isSpecialPick(Integer.parseInt(orgId1.toString()), Integer.parseInt(empId));//判断此员工是否可以特殊提取
          if(s==null){
      //      System.out.println("...不是特殊提取...");
          }
          if(s!=null){//如果是特殊提取做一个标志..
     //       System.out.println("....特殊提取....");
            request.getSession().setAttribute("special",s);
          }
          if(list==null){//尾表不存在此记录　显示此职工信息
            af.setYearPickBalance("0.00");
            af.setYearPickNumber("0");
            af.setHouseNum("");
            request.getSession().setAttribute("display", af);
          }else{//尾表存在此记录..
      //      System.out.println("存在");
            int number = 1;
            List lis = pbs.findPickHeadStateByOrgIdAndEmpId(Integer.parseInt(orgId1.toString()), Integer.parseInt(empId));
      //      System.out.println("list.size()-->"+list.size()+"orgId->"+orgId1+",empId->"+empId);
            if(!lis.isEmpty())//如果为empty状态==5或不存在记录
              number = 0;
            if(number == 0){//存在状态小于5的
       //       System.out.println("存在状态<5--------");
              errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("此员工存在未记账的提取，不可以提取",false));
              saveErrors(request, errors);
              request.getSession().setAttribute("display", new PickGetEmployeeInfoAF());
            }else{//如果不存在状态小于５的记录的是时候
              //计算年提取的地方..这个地方如果为null那就是错误的..如果用户一次没来过取过钱..也是正确的..
              List result = pbs.getYearPickBalance(Integer.parseInt(empId),securityInfo);
                Iterator resultIt = result.iterator();
                while(resultIt.hasNext()){
                  Object[] obj = (Object[])resultIt.next();
                  //如果没有职工去取过钱..那么最大年提取里面的count(*)是0所以list永远不会为null
                  //我们在这里判断一下..如果count计算出来的结果是0.我们就赋值都为0..不然null.tostrign会有错误
                  if(obj[0].toString().equals("0")){
                    af.setYearPickNumber("0");
                    af.setYearPickBalance("0.00");
                  }else{
                  af.setYearPickNumber(obj[0].toString());
                  af.setYearPickBalance(obj[1].toString());
                  }
              }
                af.setHouseNum("");
              request.getSession().setAttribute("display", af);
            }
          }
        }  
      }
    }catch(Exception s){
      s.printStackTrace();
    }
    request.setAttribute("result", new PickupAddAF());
		return new ActionForward("/pickup_add.jsp");
	}
}