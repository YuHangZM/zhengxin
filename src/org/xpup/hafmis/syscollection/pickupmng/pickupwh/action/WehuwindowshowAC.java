/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.syscollection.pickupmng.pickupwh.action;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.xpup.common.util.BSUtils;
import org.xpup.common.util.Pagination;
import org.xpup.common.util.PaginationUtils;
import org.xpup.hafmis.orgstrct.dto.OfficeDto;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.syscollection.common.domain.entity.PickHead;
import org.xpup.hafmis.syscollection.common.domain.entity.PickTail;
import org.xpup.hafmis.syscollection.pickupmng.pickup.bsinterface.IPickupBS;
import org.xpup.hafmis.syscollection.pickupmng.pickup.dto.ApplyBookDTO;
import org.xpup.hafmis.syscollection.pickupmng.pickup.dto.Convert;
import org.xpup.hafmis.syscollection.pickupmng.pickup.form.PickupGetCompanyIdAF;

/** 
 * MyEclipse Struts
 * Creation date: 06-24-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class WehuwindowshowAC extends Action {
  public static final String EMPLOYEELIST = " org.xpup.hafmis.syscollection.pickupmng.pickupwh.action.WehuwindowshowAC";
  public ActionForward execute(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response){
    String url="mx";
    String other_card_num="";
    try{
      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
      Pagination pag = null;
      PickupGetCompanyIdAF result = new PickupGetCompanyIdAF();
      String headId = request.getParameter("id");
      PickHead head=new PickHead() ;
      if(headId != null){
        url=request.getParameter("url");
      }
//      System.out.println("headId--------->"+headId);
      if(headId != null){
//        System.out.println("........恭喜你选择了一个新的单位........--->"+headId);
        request.getSession().removeAttribute("orgList");
        request.getSession().removeAttribute(EMPLOYEELIST);
        pag = getPagination(EMPLOYEELIST, request, headId);
        head = pbs.queryById(new Integer(headId));
        String orgName = head.getOrg().getOrgInfo().getName();
        String docNumber = request.getParameter("docNumber");
        String noteNumber = request.getParameter("noteNumber");
        other_card_num= head.getReserveaA();
        System.out.println("head.getReserveaA()---->"+other_card_num);
        pag.getQueryCriterions().put("orgName", orgName);
        pag.getQueryCriterions().put("docNumber", docNumber);
        pag.getQueryCriterions().put("noteNumber", noteNumber);
        pag.getQueryCriterions().put("orgid", head.getOrg().getId());
        request.getSession().removeAttribute("orgidCollnbank");
        request.getSession().setAttribute("orgidCollnbank", head.getOrg().getId().toString());
      }else{
//        System.out.println("---请你继续选择你所要的操作--");
        pag = (Pagination) request.getSession().getAttribute(EMPLOYEELIST);
      }
      PaginationUtils.updatePagination(pag, request);
      List list = pbs.findTheOrgAllEmployee(pag);//获得查询到的数据
//      System.out.println("list.size--->"+list.size());                            //这个idValue不能改..
      List print = pbs.getPrintAllEmployeeList((String)pag.getQueryCriterions().get("idValue"));//获得全部的数据..我们用全部的数据来汇总
//        System.out.println("正在为单位做汇总");//这个地方不判断list.isEmpty()因为头表存在尾表一定就存在
      this.count(print, result);    
      PickTail tail = (PickTail)print.get(0);
      String fOrgbank="";
      String forgbankid="";
      String office="";
      String collbankname="";
      if(tail.getPickHead().getOrg().getOrgInfo().getPayBank()!=null){
        fOrgbank=tail.getPickHead().getOrg().getOrgInfo().getPayBank().getName();
        forgbankid=tail.getPickHead().getOrg().getOrgInfo().getPayBank().getAccountNum();
      }
      SecurityInfo securityInfo=(SecurityInfo)request.getSession().getAttribute("SecurityInfo");
      List officlist=securityInfo.getAllCenterList();
      String collBankid=tail.getPickHead().getOrg().getOrgInfo().getCollectionBankId();
      if(officlist != null){
        OfficeDto dto=(OfficeDto)officlist.get(0);
        office=dto.getOfficeName();
      }
      if(collBankid != null){
        collbankname=pbs.findCollBank(collBankid);
     }
      result.setId("0"+pag.getQueryCriterions().get("orgid").toString());
      result.setName((String)pag.getQueryCriterions().get("orgName"));
      result.setDocNumber((String)pag.getQueryCriterions().get("docNumber"));
      result.setNoteNumber((String)pag.getQueryCriterions().get("noteNumber"));
      result.setList(list);
      
      
     
      String str[]=new String [2];
      
//    List officlist=securityInfo.getAllCenterList();
//    String collBankid=org.getOrgInfo().getCollectionBankId();
//    if(officlist != null){
//      OfficeDto dto1=(OfficeDto)officlist.get(0);
//      office=dto1.getOfficeName();
//    }
//    if(collBankid != null){
//      collbankname=personAddPayBS.findCollBank(collBankid);
//   }
      str= pbs.queryOfficeBankNames(head.getOrg().getId().toString(), "2",headId.toString(), "D", securityInfo);
      if(str[0]!=null){
        office=str[0];
      }
      if(str[1]!=null){
        collbankname=str[1];
      }
      
      
      
      
      
      
      ApplyBookDTO dto = new ApplyBookDTO();
      dto.setHeadid(headId);
      dto.setPickBalance(result.getSumBalance());
      dto.setSOrgName(result.getName());
      dto.setSOrgBank(fOrgbank);
      dto.setSOrgNumber(forgbankid);
      dto.setFOrgBank(collbankname);
      dto.setFOrgName(office);
      dto.setOrgid(result.getId());
      dto.setDocnum(result.getDocNumber());
      dto.setOrgid(head.getOrg().getId().toString());
      dto.setOther_card_num(head.getReserveaA());
      dto.setNote_num(result.getNoteNumber());
      request.getSession().setAttribute("applys", dto);
      request.getSession().setAttribute("orgList",result);
      request.getSession().setAttribute("employees",list);
    }catch(Exception s){
      s.printStackTrace();
    }
    if(url!=null&&!url.equals("mx")){   
      return new ActionForward("/printEmployeeAC.do");
    }else{
      return new ActionForward("/orgwindow.jsp");
    }
  }
  private Pagination getPagination(String paginationKey,
      HttpServletRequest request,String headId) {
    Pagination pagination = (Pagination) request.getSession().getAttribute(
        paginationKey);
    if (pagination == null) {//第一次进来的时候...
      pagination = new Pagination(0,10,1,"emp.id","desc",new HashMap(0));
      pagination.getQueryCriterions().put("idValue",headId);
      request.getSession().setAttribute(paginationKey, pagination);
    }
    return pagination;
  }
  private void count(List list,PickupGetCompanyIdAF result){
    System.out.println("wehuwindowshowac..."+list.size());
    int sumPerson = 0;
    double sumTotal = 0.00;
    double sumBalance = 0.00; 
    double sumInterest = 0.00;
    int sumDistroyPick = 0;
    int sumSomePick = 0;
    if(list!=null && !list.isEmpty()){
      Iterator it = list.iterator();
      while(it.hasNext()){//循环累加各种变量...给数据汇总
        PickTail t = (PickTail)it.next();
        sumBalance = sumBalance + t.getPickCurBalance().doubleValue()+t.getPickPreBalance().doubleValue();
        sumInterest = sumInterest + t.getPickCurInterest().doubleValue()+t.getPickPreInterest().doubleValue();
        if(t.getPickType().intValue()== 1)//部分提取
          sumSomePick++;
        if(t.getPickType().intValue() == 2)//销户提取
          sumDistroyPick++;
          
      }
      sumPerson = sumSomePick + sumDistroyPick;
      sumTotal = sumBalance + sumInterest;
      //把汇总的数据放在Form集合里面...等着显示数据
      result.setSomePickupNumber(sumSomePick);
      result.setDistoryPickupNumber(sumDistroyPick);
      result.setSumPerson(sumPerson);
      String balance = new Double(sumBalance).toString();
      String interest = new Double(sumInterest).toString();
      String sum = new Double(sumTotal).toString();
      result.setSumBalance(new BigDecimal(Convert.getTwoDouble(balance)));
      result.setSumInterese(new BigDecimal(Convert.getTwoDouble(interest)));
      result.setSumTotal(new BigDecimal(Convert.getTwoDouble(sum)));
    }
  }
}