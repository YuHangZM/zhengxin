/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.syscollection.pickupmng.pickupwh.action;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.LookupDispatchAction;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.common.form.IdAF;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.syscollection.common.domain.entity.Org;
import org.xpup.hafmis.syscollection.common.domain.entity.PickHead;
import org.xpup.hafmis.syscollection.pickupmng.pickup.bsinterface.IPickupBS;
public class PickupWHMiantainAC extends LookupDispatchAction {
  protected Map getKeyMethodMap() {
    Map map = new HashMap();
//    map.put("button.delete", "delete");
//    map.put("button.print", "print");
//    map.put("button.update", "update");
    map.put("button.auditing.pass", "pass");
    map.put("button.auditing.quash", "delpass");
    map.put("button.over.pickup", "overPickup");
    map.put("button.del.pickup", "deletePickup");
    map.put("button.scan", "scan");
    return map;
  }
  public ActionForward pass(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    ActionMessages messages = new ActionMessages();
    try{
      SecurityInfo sInfo = (SecurityInfo)request.getSession().getAttribute("SecurityInfo");
      IdAF idAF = (IdAF)form;
      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
      PickHead pickHead = pbs.queryById(new Integer(idAF.getId().toString()));
      boolean flag = pbs.queryUnitAcc(pickHead.getOrg().getId().toString());
      if(flag){
        String con=pbs.getAA307PhotoURL(idAF.getId().toString());
        if(!con.equals("0")){
          messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("有件没扫描，不允许审核通过!",false));
          saveErrors(request, messages);
          return new ActionForward("/pickupWHShowAC.do");
        }
      }
      pbs.updatePickHeadReserveaA(new Integer(idAF.getId().toString()),"0",sInfo.getUserName());
    }catch(Exception s){
      s.printStackTrace();
    }
    return new ActionForward("/pickupWHShowAC.do");
  }
  public ActionForward delpass(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    try{
      SecurityInfo sInfo = (SecurityInfo)request.getSession().getAttribute("SecurityInfo");
      IdAF idAF = (IdAF)form;
      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
      pbs.updatePickHeadReserveaA(new Integer(idAF.getId().toString()),"1",sInfo.getUserName());
    }catch(Exception s){
      s.printStackTrace();
    }
    return new ActionForward("/pickupWHShowAC.do");
  }
//  public ActionForward delete(ActionMapping mapping, ActionForm form,
//      HttpServletRequest request, HttpServletResponse response) {
//    ActionMessages messages = null;
//    try{
//      IdAF idAF = (IdAF)form;
//      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
//      int id = Integer.parseInt(idAF.getId().toString());
//      SecurityInfo sInfo = (SecurityInfo)request.getSession().getAttribute("SecurityInfo");
//      pbs.deleteHeadTailByHeadId(id, sInfo.getUserIp(), sInfo.getUserName(),sInfo);
//      request.getSession().removeAttribute(PickupWHShowAC.VINDICATE);
//    }catch (BusinessException e) {
//      messages = new ActionMessages();
//      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(e
//          .getLocalizedMessage().toString(), false));
//      saveErrors(request, messages);
//    }catch(Exception s){
//      s.printStackTrace();
//    }
//    return new ActionForward("/vindicateListShowAC.do");
//  }
 
//  public ActionForward print(ActionMapping mapping, ActionForm form,
//      HttpServletRequest request, HttpServletResponse response) {
//    try{
//      String print = request.getParameter("report");//和完成提取的方法完全一样..只是少了一句完成提取功能的BS函数
////      System.out.println("print-->"+print);
//      IdAF idAF = (IdAF)form;
//      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
//      ILoanDocNumDesignBS loanDocNumDesignBS = (ILoanDocNumDesignBS) BSUtils.getBusinessService("loanDocNumDesignBS", this, mapping.getModuleConfig());
//      SecurityInfo s=(SecurityInfo)request.getSession().getAttribute("SecurityInfo");
//      int orgId = Integer.parseInt(idAF.getId().toString());
//      Date bizdate=BusiTools.stringToUDate(s.getUserInfo().getBizDate(), "yyyyMMdd");
//      String date = BusiTools.dateToString(bizdate, "yyyy-MM-dd");
//
//      String userName="";
//      try {
//        String name = loanDocNumDesignBS.getNamePara();
//
//        if (name.equals("1")) {
//          userName = s.getUserName();
//        } else {
//          userName = s.getRealName();
//        }
//
//      } catch (Exception e) {
//        // TODO Auto-generated catch block
//        e.printStackTrace();
//      }
////      System.out.println("overpikcup-->"+idAF.getId());
////        System.out.println("...打印...");
//        List list = pbs.getPrintAllEmployeeList(idAF.getId().toString());//获得要打印的集合..
////        System.out.println("打印的集合长度是......."+list.size());
//        ApplyBookDTO apply = new ApplyBookDTO();//获取凭证..
//        PickTail pick=null;
//        if(list.size()>0){
//         pick = (PickTail) list.get(0);
//        }
//        NameAF nameAF = new NameAF();
//        NameAF othernameAF = new NameAF();
//        nameAF = pbs.findName(pick.getPickHead().getOrg().getId().toString());
//        
//        String office="";
//        String collbankname="";
//        String str[]=new String [2];
//        
////      List officlist=securityInfo.getAllCenterList();
////      String collBankid=org.getOrgInfo().getCollectionBankId();
////      if(officlist != null){
////        OfficeDto dto1=(OfficeDto)officlist.get(0);
////        office=dto1.getOfficeName();
////      }
////      if(collBankid != null){
////        collbankname=personAddPayBS.findCollBank(collBankid);
////     }
//        str= pbs.queryOfficeBankNames(pick.getPickHead().getOrg().getId().toString(), "2",idAF.getId().toString(), "D", s);
//        
//        if(str[0]!=null){
//          office=str[0];
//        }
//        if(str[1]!=null){
//          collbankname=str[1];
//        }
//      //  othernameAF = pbs.findpickTail(pick.getPickHead().getOrg().getId().toString());
//        apply.setSOrgName(nameAF.getOrgName());//收款单位名称
//        apply.setSOrgNumber(nameAF.getPayBankNum());//收款单位账号(发薪银行)
//        apply.setSOrgBank(nameAF.getPayBank());//收款单位银行
//        apply.setFOrgName(office);//付款单位名称(中心)
//        apply.setFOrgNumber(" ");//付款单位账号(中心)
//        apply.setFOrgBank(collbankname);//付款单位(中心归集银行)
//        apply.setPickBalance(pick.getPickHead().getPickBalance().add(pick.getPickHead().getDistroyInterest()).divide(new BigDecimal(1),2,BigDecimal.ROUND_HALF_DOWN));//必须转换成两位小数
//        apply.setBizdate(date);
//        apply.setDocnum(pick.getPickHead().getDocNum());
//        apply.setOperater(userName);
//        request.setAttribute("apply", apply);
//        request.setAttribute("PRINT", "vindicateListShowAC.do");
//        request.setAttribute("employee", list);
//        //获得打印凭证
//         
//    }catch(Exception s){
//      s.printStackTrace();
//    }
//     return new ActionForward("/yingkouDoc.jsp"); 
//  }
  public ActionForward overPickup(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    //完成提取的打印...打印凭证和列表
    ActionMessages messages = new ActionMessages();
    try{
      String print = request.getParameter("report");
      IdAF idAF = (IdAF)form;
      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
      SecurityInfo s=(SecurityInfo)request.getSession().getAttribute("SecurityInfo");
      Org org = pbs.getOrgByHeadId(new Integer(idAF.getId().toString()));//完成提取做了...
      int orgId = Integer.parseInt(org.getId().toString());
      boolean flag=pbs.overPickVindicate(orgId,s.getUserIp(), s.getUserName(),s.getUserInfo().getBizDate(),null,s);//启动完成提取操作数据库的语句
      if(flag){
//        if(print.equals("print")){
//          List list = pbs.getPrintAllEmployeeList(idAF.getId().toString());//获得要打印的集合..
//          ApplyBookDTO apply = new ApplyBookDTO();//获取凭证..
//
//          PickTail pick=null;
//          if(list.size()>0){
//           pick = (PickTail) list.get(0);
//          }
//          NameAF nameAF = new NameAF();
//          NameAF othernameAF = new NameAF();
//          nameAF = pbs.findName(org.getId().toString());
//       //   othernameAF = pbs.findpickTail(org.getId().toString());
//          apply.setSOrgName(nameAF.getOrgName());//收款单位名称
//          apply.setSOrgNumber(nameAF.getPayBankNum());//收款单位账号(发薪银行)
//          apply.setSOrgBank(nameAF.getPayBank());//收款单位银行
//          apply.setFOrgName(nameAF.getOrganizatinUnitName());//付款单位名称(中心)
//          apply.setFOrgNumber(" ");//付款单位账号(中心)
//          apply.setFOrgBank(nameAF.getCentercollBankName());//付款单位(中心归集银行)
//          apply.setPickBalance(pick.getPickHead().getPickBalance().add(pick.getPickHead().getDistroyInterest()).divide(new BigDecimal(1),2,BigDecimal.ROUND_HALF_DOWN));//必须转换成两位小数
//          request.setAttribute("apply", apply);
//          request.setAttribute("PRINT", "vindicateListShowAC.do");
//          request.setAttribute("employee", list);
//          //获得打印凭证
//          return new ActionForward("/printDocAndList.jsp"); 
//        }
        return new ActionForward("/pickupWHShowAC.do");
      }
      else{
        messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("不能完成提取，该笔业务已经完成提取过",false));
        saveErrors(request, messages);
        return new ActionForward("/pickupWHShowAC.do");
      }
    }catch(Exception s){
      s.printStackTrace();
    }
    return null;
  }
  public ActionForward deletePickup(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    try{
      IdAF idAF = (IdAF)form;
      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
      SecurityInfo s=(SecurityInfo)request.getSession().getAttribute("SecurityInfo");
//      System.out.println("deletepickup-->"+idAF.getId());//这个地方应该换成头表的ID这样
      int headId = Integer.parseInt(idAF.getId().toString());
      String statueIsOne = pbs.recallPickup(headId, s);
      //证明已经是返回来了 根本没有做撤消提取的业务..表里也不会直接插字段...
      if(statueIsOne!=null){
         ActionMessages errors = new ActionMessages();
         errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("撤消提取失败 存在未完成的提取业务,请先完成",false));
         saveErrors(request, errors);
      }
    }catch(Exception ss){
//      System.out.println("撤消提取出现错误");
      ss.printStackTrace();
    }
    return new ActionForward("/pickupWHShowAC.do");
  }
//  
//   public ActionForward referringdata(ActionMapping mapping, ActionForm form,
//        HttpServletRequest request, HttpServletResponse response) {
//      IdAF idAF = (IdAF)form;
//      String headId = idAF.getId().toString();
//      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
//      SecurityInfo securityInfo = (SecurityInfo)request.getSession().getAttribute("SecurityInfo");
//      ActionMessages messages = null;
//      String temp_p="2";
//      try {
//        pbs.referringData(headId,securityInfo,temp_p);
//      } catch (BusinessException be) {
//        messages = new ActionMessages();
//        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(be
//            .getLocalizedMessage().toString(), false));
//        saveErrors(request, messages);
//      }
//      return new ActionForward("/vindicateActionAC.do");
//    }
//    public ActionForward pprovaldata(ActionMapping mapping, ActionForm form,
//        HttpServletRequest request, HttpServletResponse response) {
//      IdAF idAF = (IdAF)form;
//      String headId = idAF.getId().toString();
//      IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
//      SecurityInfo securityInfo = (SecurityInfo)request.getSession().getAttribute("SecurityInfo");
//      ActionMessages messages = null;
//      String temp_p="2";
//      try {
//        pbs.pprovalData(headId,securityInfo,temp_p);
//      } catch (BusinessException be) {
//        messages = new ActionMessages();
//        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(be
//            .getLocalizedMessage().toString(), false));
//        saveErrors(request, messages);
//      }
//      return new ActionForward("/vindicateActionAC.do");
//    }
//    public ActionForward scan(ActionMapping mapping, ActionForm form,
//        HttpServletRequest request, HttpServletResponse response) throws Exception{
//      PictureUpload pu = new PictureUpload();
//      String path;
//      ActionMessages messages = null;
//      try
//      {
//        SecurityInfo securityInfo = (SecurityInfo) request.getSession().getAttribute("SecurityInfo");
//       
//          String serverPath=BusiConst.UPLOAD_SERVER_PATH;
//          path = pu.upload(securityInfo.getUserInfo().getUserIp(), "picture", serverPath);
//          IPickupBS pbs = (IPickupBS)BSUtils.getBusinessService("pickupBS",this,mapping.getModuleConfig());
//          IdAF idAF = (IdAF)form;
//          System.out.println(path+"<=========");
//         request.getSession().setAttribute("tdsetIsNeedDel","1");
//      boolean flag =pbs.updatePickHead(idAF.getId().toString(),path);  // 更新aa306 只是为了把path添加到aa306中 
//      if(flag){
//        messages = new ActionMessages();
//        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("扫描完成", false));
//        saveErrors(request, messages);
//      }
//      else{
//        messages = new ActionMessages();
//        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("扫描失败", false));
//        saveErrors(request, messages);
//      }
//      }
//      catch(IOException e)
//      {
//        messages = new ActionMessages();
//        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("扫描失败", false));
//        saveErrors(request, messages);
//          e.printStackTrace();
//      }
//     
//      
//      return new ActionForward("/vindicateActionAC.do");
//    } 

}