/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.sysloan.dataready.develop.action;

import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;
import org.xpup.common.util.BSUtils;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.sysloan.common.domain.entity.Build;
import org.xpup.hafmis.sysloan.dataready.develop.bsinterface.IDevelopBS;
import org.xpup.hafmis.sysloan.dataready.develop.dto.BuildDTO;
import org.xpup.hafmis.sysloan.dataready.develop.form.BuildNewAF;

/** 
 * MyEclipse Struts
 * Creation date: 06-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/buildNewAC" name="buildNewAF" scope="request" validate="true"
 */
public class BuildNewAC extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveBuildInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BuildNewAF buildNewAF = (BuildNewAF) form;// TODO Auto-generated method stub
    if (!isTokenValid(request, true)) {
      ActionMessages messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("请不要重复提交！",
          false));
      saveErrors(request, messages);
      saveToken(request);
    } else{
      try {
        SecurityInfo securityInfo = (SecurityInfo) request.getSession()
        .getAttribute("SecurityInfo");

    IDevelopBS developBS = (IDevelopBS) BSUtils.getBusinessService(
        "developBS", this, mapping.getModuleConfig());
    
    String floorId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorId();
    System.out.println("newac save..floorId=="+floorId);
    String developId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getDeveloperId();
    developBS.saveBuildInfo(buildNewAF, securityInfo,floorId,developId);
      } catch (Exception e) {
        // TODO: handle exception
//      解决反复添加失败时由于重复提交控制而引起的不能添加问题
        saveToken(request);
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("添加失败！",
            false));
        saveErrors(request, messages);
        e.printStackTrace();
      }
    }
    return mapping.findForward("buildShowAC");
	}
  
  public ActionForward modifyBuildInfo(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    BuildNewAF buildNewAF = (BuildNewAF) form;// TODO Auto-generated method stub
    if (!isTokenValid(request, true)) {
      ActionMessages messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("请不要重复提交！",
          false));
      saveErrors(request, messages);
      saveToken(request);
    } else{
      try {
        Build build = (Build)request.getSession().getAttribute("build_update");
      //  build.setFloorId(new BigDecimal(buildNewAF.getFloorId()));
        build.setBuildNum(buildNewAF.getBuildNum().trim());
        build.setBuildAdd(buildNewAF.getBuildAdd().trim());
        build.setFundStatus(buildNewAF.getFundStatus());
        build.setBuild_s(buildNewAF.getBuild_s());
        build.setReserved(buildNewAF.getReserved().trim());
        
        SecurityInfo securityInfo = (SecurityInfo) request.getSession()
        .getAttribute("SecurityInfo");

        IDevelopBS developBS = (IDevelopBS) BSUtils.getBusinessService(
            "developBS", this, mapping.getModuleConfig());
        String floorId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorNum();
        String floorId_true=((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorId();
        build.setFloorId(new BigDecimal(floorId_true));
        
        String developId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getDeveloperId();
        developBS.modifyBuildInfo(build, securityInfo, floorId, developId);
    
      } catch (Exception e) {
        // TODO: handle exception
//      解决反复修改失败时由于重复提交控制而引起的不能修改问题
        saveToken(request);
        ActionMessages messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("修改失败！",
            false));
        saveErrors(request, messages);
        e.printStackTrace();
      }
    }
    return mapping.findForward("buildShowAC");
  }
  
  public ActionForward backBuildInfo(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    //BuildNewAF buildNewAF = (BuildNewAF) form;// TODO Auto-generated method stub
    return mapping.findForward("buildShowAC");
  }
}