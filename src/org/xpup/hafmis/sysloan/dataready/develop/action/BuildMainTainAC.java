/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.xpup.hafmis.sysloan.dataready.develop.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.LookupDispatchAction;
import org.xpup.common.exception.BusinessException;
import org.xpup.common.util.BSUtils;
import org.xpup.common.util.Pagination;
import org.xpup.common.util.PaginationUtils;
import org.xpup.hafmis.orgstrct.dto.SecurityInfo;
import org.xpup.hafmis.sysloan.common.domain.entity.Build;
import org.xpup.hafmis.sysloan.dataready.develop.bsinterface.IDevelopBS;
import org.xpup.hafmis.sysloan.dataready.develop.dto.BuildDTO;
import org.xpup.hafmis.sysloan.dataready.develop.form.BuildMainTainAF;
import org.xpup.hafmis.sysloan.dataready.develop.form.BuildNewAF;

/** 
 * MyEclipse Struts
 * Creation date: 06-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/buildMainTainAC" name="idAF" scope="request" validate="true"
 */
public class BuildMainTainAC extends LookupDispatchAction {
  /*
   * Generated Methods
   */

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward add(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    saveToken(request);
    try {
      String floorId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorNum();
      BuildNewAF buildNewAF = new BuildNewAF();
      buildNewAF.setFloorId(floorId);
      request.setAttribute("buildNewAF", buildNewAF);
    } catch (Exception e) {
      // TODO: handle exception
      e.printStackTrace();
    }
    return mapping.findForward("to_build_new");
  }
  
  public ActionForward update(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    BuildMainTainAF idAF = (BuildMainTainAF) form;// TODO Auto-generated method stub
    saveToken(request);
    try {
      IDevelopBS developBS = (IDevelopBS) BSUtils.getBusinessService(
          "developBS", this, mapping.getModuleConfig());
      Build build = developBS.findBuildInfo(new Integer(idAF.getId().toString()));
      BuildNewAF buildNewAF = new BuildNewAF();
      String floorId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorNum();
      buildNewAF.setFloorId(floorId);
      buildNewAF.setBuildNum(build.getBuildNum());
      buildNewAF.setBuild_s(build.getBuild_s());
      buildNewAF.setBuildAdd(build.getBuildAdd());
      buildNewAF.setFundStatus(build.getFundStatus());
      buildNewAF.setReserved(build.getReserved());
      buildNewAF.setType("1");
      request.setAttribute("buildNewAF", buildNewAF);
      request.getSession().setAttribute("build_update", build);
    } catch (Exception e) {
      // TODO: handle exception
      e.printStackTrace();
    }
    return mapping.findForward("to_build_new");
  }
  
  public ActionForward export(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) throws BusinessException{
    //BuildMainTainAF idAF = (BuildMainTainAF) form;// TODO Auto-generated method stub
    ActionMessages messages = null;
    try {
      IDevelopBS developBS = (IDevelopBS) BSUtils.getBusinessService(
          "developBS", this, mapping.getModuleConfig());
      SecurityInfo securityInfo=(SecurityInfo)request.getSession().getAttribute("SecurityInfo");
      
      String floorId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorNum();
      String floorName = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorName();
      String developerId = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getDeveloperId();
      String developerName = ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getDeveloperName();
      String paginationKey = getPaginationKey();
      Pagination pagination = getPagination(paginationKey, request);
      PaginationUtils.updatePagination(pagination, request);
      pagination.getQueryCriterions().put("id", ((BuildDTO)request.getSession().getAttribute("buildInfo_1")).getFloorId());
      List expList = new ArrayList();
      expList.add(developerId);
      expList.add(developerName);
      expList.add(floorId);
      expList.add(floorName);
      expList.add(developBS.findBuildList_exp(pagination));
      if (expList.size() > 0) {
        messages = new ActionMessages();
        messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("导出成功！",
            false));
        saveErrors(request, messages);
        request.getSession().setAttribute("explist", expList);
        response.sendRedirect(request.getContextPath()
            + "/ExportServlet?ISCANSHU=false&EXP_NAME=build_exp");
        developBS.insertHafOperateLog(floorId,securityInfo);
      }
      return null;
      
    }catch (BusinessException bex) {
      messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(bex
          .getLocalizedMessage().toString(), false));
      saveErrors(request, messages);
    } 
    catch (Exception e) {
      messages = new ActionMessages();
      messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("导出失败！",
          false));
      saveErrors(request, messages);
    }
      return mapping.findForward("buildShowAC");
  }
  
  public ActionForward import1(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    //BuildMainTainAF idAF = (BuildMainTainAF) form;// TODO Auto-generated method stub
    return mapping.findForward("to_build_import");
  }
  
  public ActionForward delete(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    BuildMainTainAF idAF = (BuildMainTainAF) form;// TODO Auto-generated method stub
    try {
      SecurityInfo securityInfo = (SecurityInfo) request.getSession()
      .getAttribute("SecurityInfo");
      
      IDevelopBS developBS = (IDevelopBS) BSUtils.getBusinessService(
          "developBS", this, mapping.getModuleConfig());
      Build build = developBS.findBuildInfo(new Integer(idAF.getId().toString()));
      
      developBS.deleteBuildInfo(build, securityInfo);
    } catch (Exception e) {
      // TODO: handle exception
      e.printStackTrace();
    }
    return mapping.findForward("buildShowAC");
  }
  
  public ActionForward back(ActionMapping mapping, ActionForm form,
      HttpServletRequest request, HttpServletResponse response) {
    //BuildMainTainAF idAF = (BuildMainTainAF) form;// TODO Auto-generated method stub
    try {
      request.setAttribute("HEAD_ID", request.getSession().getAttribute("HEAD_ID1"));
    } catch (Exception e) {
      // TODO: handle exception
      e.printStackTrace();
    }
    return mapping.findForward("floorShowAC");
  }

  protected Map getKeyMethodMap() {
    // TODO Auto-generated method stub
    Map map = new HashMap();
    map.put("button.add", "add");
    map.put("button.update", "update");
    map.put("button.export", "export");
    map.put("button.import", "import1");
    map.put("button.back", "back");
    map.put("button.delete", "delete");
    return map;
  }
  private Pagination getPagination(String paginationKey,
      HttpServletRequest request) {
    Pagination pagination = (Pagination) request.getSession().getAttribute(
        paginationKey);
    if (pagination == null) {
      pagination = new Pagination(0, 10, 1, "t.build_id", "DESC", new HashMap(
          0));
      request.getSession().setAttribute(paginationKey, pagination);
    }
    return pagination;
  }

  protected String getPaginationKey() {
    return BuildShowAC.PAGINATION_KEY;
  }
}