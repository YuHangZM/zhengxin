/* Generated by Together */

package org.xpup.common.util;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.xpup.common.enums.OrderEnum;

public class Pagination implements Serializable {

  private static final long serialVersionUID = 9008693312042560300L;

  public Pagination() {
    this(0);
  }

  public Pagination(int count) {
    this(count, DEFAULT_PAGE_SIZE);
  }

  public Pagination(int count, int pageSize) {
    this(count, pageSize, 1);
  }

  public Pagination(int count, int pageSize, int page) {
    this(count, pageSize, page, null, OrderEnum.ASC, new HashMap());
  }

  /**
   * @param count 查询结果总条目数
   * @param pageSize 每页的条目数
   * @param page 当前的页码
   * @param orderBy 排序字段
   * @param order 排序次序
   * @param queryCriterions 查询条件
   */
  public Pagination(int count, int pageSize, int page, String orderBy,
      OrderEnum order, Map queryCriterions) {
    this.count = count;
    this.order = order;
    this.orderBy = orderBy;
    this.queryCriterions = queryCriterions;
    this.setPageSize(pageSize);
    this.setPage(page);
  }

  /**
   * @param count 查询结果总条目数
   * @param pageSize 每页的条目数
   * @param page 当前的页码
   * @param orderBy 排序字段
   * @param order 排序次序
   * @param queryCriterions 查询条件
   */
  public Pagination(int count, int pageSize, int page, String orderBy,
      String orderother, Map queryCriterions) {
    this.count = count;
    this.orderother = orderother;
    this.orderBy = orderBy;
    this.queryCriterions = queryCriterions;
    this.setPageSize(pageSize);
    this.setPage(page);
  }
  public int getLastElementOnPage() {
    int endIndex = getPageSize() * getPage();
    return endIndex > count ? count : endIndex;
  }

  public int getFirstElementOnPage() {
    return (getPageSize() * (getPage() - 1)) + 1;
  }

  public int getPage() {
    if (this.page >= getPageCount()) {
      this.page = getPageCount();
    }
    return this.page;
  }

  public void setPage(int page) {
    if (page < 1) {
      this.page = 1;
    }
    if (page > getPageCount()) {
      this.page = getPageCount();
    }
    if (page >= 1 && page <= getPageCount()) {
      this.page = page;
    }
  }

  public int getNrOfElements() {
    return count;
  }

  public void setNrOfElements(int count) {
    this.count = count;
    this.setPage(page);
  }

  public int getPageSize() {
    return pageSize;
  }

  public void setPageSize(int pageSize) {
    if (pageSize != this.pageSize) {
      if (pageSize > 0) {
        this.pageSize = pageSize;
      }
      this.setPage(page);
    }
  }

  public Map getQueryCriterions() {
    return queryCriterions;
  }

  public OrderEnum getOrder() {
    return order;
  }

  public void setOrder(OrderEnum order) {
    this.order = order;
  }

  public String getOrderother() {
    return orderother;
  }

  public void setOrderother(String orderother) {
    this.orderother = orderother;
  }
  public String getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(String orderBy) {
    this.orderBy = orderBy;
  }

  public Map getStandby() {
    return standby;
  }

  public void setPageCount(int pageCount) {
    this.pageCount = pageCount;
  }
  
  public int getPageCount() {
    float nrOfPages = (float) count / getPageSize();
    if(pageCount == 0){
      return (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1
          : nrOfPages);
    } else{
      return this.pageCount;
    }
  }

  public List getPageList() {
    return getPageList(DEFAULT_PAGELIST_SIZE);
  }

  /**
   * @param listSize
   * @return
   */
  public List getPageList(int listSize) {
    List list = new ArrayList();
    int begin = 1;
    int end = 1;

    if (listSize < 0) {
      end = getPageCount();
    } else {
      int size = 0;
      int mod = listSize % 2;
      if (mod == 0) {
        size = listSize / 2;
        end = (getPage() + size - 1) > getPageCount() ? getPageCount()
            : (getPage() + size - 1);
      } else {
        size = (listSize - 1) / 2;
        end = (getPage() + size) > getPageCount() ? getPageCount()
            : (getPage() + size);
      }
      begin = (getPage() - size) > 1 ? (getPage() - size) : 1;
    }

    for (int i = begin; i < end + 1; i++) {
      HashMap map = new HashMap();
      map.put(new Integer(i), new Integer(i));
      list.add(map);
    }
    return list;
  }

  /**
   * <pagination> <count>132</count> <page-size>10</page-size> <current-page>5</current-page>
   * <order-by>organization.name</order-by> <order>asc</order>
   * <query-criterions> <query-criterion> 
   *      <key>name</key>
   *      <value>IBM</value>
   *    </query-criterion>
   *  </query-criterions>
   *<pagination>
   */
  public String getPaginationXml() {
    String separator = System.getProperty("line.separator");
    StringBuffer sb = new StringBuffer();
    sb.append("<pagination>" + separator);
    sb.append("  <count>" + getNrOfElements() + "</count>" + separator);
    sb.append("  <page-size>" + getPageSize() + "</page-size>" + separator);
    sb.append("  <current-page>" + getPage() + "</current-page>" + separator);
    sb.append("  <order-by>" + getOrderBy() + "</order-by>" + separator);
    sb.append("  <order>" + getOrder() + "</order>" + separator);
    sb.append("  <query-criterions>" + separator);
    Iterator it = getQueryCriterions().keySet().iterator();
    while (it.hasNext()) {
      String key = (String) it.next();
      String value = getQueryCriterions().get(key).toString();
      sb.append("    <query-criterion>" + separator);
      sb.append("      <key>" + key + "</key>" + separator);
      sb.append("      <value>" + value + "</value>" + separator);
      sb.append("    </query-criterion>" + separator);
    }
    sb.append("  </query-criterions>" + separator);
    sb.append("<pagination>" + separator);
    return sb.toString();
  }

  public boolean isLastPage() {
    return getPage() == getPageCount();
  }

  public boolean isFirstPage() {
    return getPage() == 1;
  }

  public void previousPage() {
    if (!isFirstPage()) {
      this.page--;
    }
  }

  public void nextPage() {
    if (!isLastPage()) {
      this.page++;
    }
  }

  public void lastPage() {
    page = getPageCount();
  }

  public void firstPage() {
    page = 1;
  }
  //调页添加代码
  public void changpage(String pageinfo){
    page = new Integer(pageinfo).intValue();
  }
  public void moveTo(int page) {
    setPage(page);
  }

  public void execute(String action) {
    if ("first".equals(action)) {
      this.firstPage();
    } else if ("prev".equals(action)) {
      this.previousPage();
    } else if ("next".equals(action)) {
      this.nextPage();
    } else if ("last".equals(action)) {
      this.lastPage();
    } else{
      this.changpage(action);
    }

    try {
      int page = Integer.parseInt(action);
      moveTo(page);
    } catch (Exception ex) {
    }
  }

  protected void addMethod(String method) {
    methods.add(method);
  }

  protected void invokeMethods() {
    try {
      while (methods.size() != 0) {
        String strMethod = (String) methods.remove(0);
        Method method = Pagination.class.getMethod(strMethod, null);
        method.invoke(this, null);
      }
    } catch (Exception ex) {
    }
  }

  public static final int DEFAULT_PAGE_SIZE = 10;

  public static final int DEFAULT_PAGELIST_SIZE = 10;

  private int page = 1;

  private int pageSize = DEFAULT_PAGE_SIZE;

  private int count = 0;

  private Map queryCriterions = null;

  private String orderBy = null;

  private OrderEnum order = OrderEnum.ASC;

  private String orderother = null;
  
  private Map standby = new HashMap();

  private ArrayList methods = new ArrayList();
  
  private int pageCount = 0;

}
